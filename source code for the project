	#include <iostream>
	#include <cstdlib>
	#include <iomanip>
	#include <windows.h>
	using namespace std;
	int id=10,dd=0;
	void Menu(){
		cout<<"+ + + + + + + + + + + + + +"<<endl;
		cout<<"+ What do you want to do? +"<<endl;
		cout<<"+ 1. Update drug store    +"<<endl;
		cout<<"+ 2. View drug store      +"<<endl;
	    cout<<"+ 3. View drug stack      +"<<endl;
	    cout<<"+ 4. Clear Expired drugs  +"<<endl;
	    cout<<"+     and See Warnings    +"<<endl;
	    cout<<"+ 5. Disposed Medicines   +"<<endl;
	    cout<<"+ 6. Delete a medicine    +"<<endl;
	    cout<<"+ 7. Daily total sales    +"<<endl;
	    cout<<"+ 8. Back to Main Menu    +"<<endl;
	    cout<<"+ 0. Total profit Vs Total cost   +"<<endl;
		cout<<"+ 9. Exit                 +"<<endl;
		cout<<"+ + + + + + + + + + + + + +"<<endl;
	}
	
	
	void customMenu(){
		cout<<"+ + + + + + + + + + + + + + + +"<<endl;
		cout<<"+ What do you want to do?     +"<<endl;
		cout<<"+ 1. View drug store          +"<<endl;
		cout<<"+ 2. View drug availability   +"<<endl;
	    cout<<"+ 3. Place Order              +"<<endl;
	    cout<<"+ 4. Back to Main Menu        +"<<endl;
	    cout<<"+ 5. Exit                     +"<<endl;
		cout<<"+ + + + + + + + + + + + + + + +"<<endl;
	}
	
	void About(){
		cout<<"This system is designed to handle the transactons of a pharmacy medical store managemet.\n"
		    <<"It is straight forward sice it has a specified descriptive heading  for each task except \n"
			<<"one thing. which is sometimes at the time of run you may look a red lightning,which indicates\n"
			<<"there is a drug in the store thta have been expired and need to be disposed"<<endl;
	}
			
		
	struct Date{
	    int dd,mm,yy;
	};
	
	struct medicine_types{
	int ID,quantity,number_of_sold;
	float price,cost_of_each_drug;
	string name;
	Date Manufacture_date,Expiry_date;
	string type;

};

struct Total_sales_store{
	medicine_types sales_list;
	float total_sale;
}Med_sales[500];
	
	medicine_types Disposed_Med[500]; //universal structure to store expired drugs
	
	//Function declarations
	void Delete_Med(medicine_types stored[]);
	void Store_Drug (medicine_types med[]);
	void View_store(medicine_types stored[]);
	void check_stack(medicine_types Med_stack[]);
	void main_menu(medicine_types store[]);
	void admin_menu(medicine_types store[]);
	void customer_menu(medicine_types store[]);
	void place_order(medicine_types store[]);
	void Expiry_Notification_Indicator(medicine_types Medicines[]);
	void Drug_Disposal(medicine_types store[]);
	void Total_sales_table(medicine_types store[]);
	void Disposed_Med_list();
	void Profit_Analysis(medicine_types store[]);
	void Loading_bar();
	void Loading_bar_noti(){
		system("color 04");
		cout<<"\t\t\t\t\nYou have expired drugs...";
		char x=219;
		for(int i=0;i<40;i++){
			cout<<x;
			Sleep(2);
		}
		system("color 07");
		Sleep(20);
		cout<<endl;
		
	}
	
	
	int main(){ 
	    //cout<<"---------------------------------------"<<endl;
	    //cout<<"Welcome to Our medical store Program"<<endl;
	    //cout<<"---------------------------------------"<<endl;
	    setprecision(3);
	    medicine_types store[100]={{1,10,0,12,11,"paracetamol",12,12,2200,11,11,2022,"antibiotic"},{2,10,0,12,11,"paracetamol",10,12,2200,11,11,2020,"antibiotic"},
	{3,10,0,12,11,"paracetamol",12,12,2000,11,11,2020,"antibiotic"},{4,10,0,12,10.99,"paracetamol",12,12,2200,11,9,2021,"antibiotic"},
	{5,10,0,12,11,"paracetamol",12,12,2200,11,11,2209,"antibiotic"},{6,10,0,12,11,"paracetamol",12,12,2200,11,11,2019,"antibiotic"},
	{7,10,0,12,12,"paracetamol",12,12,2200,11,11,2209,"antibiotic"},{8,10,0,12,10,"paracetamol",12,12,2200,11,11,2209,"antibiotic"},
	{9,10,0,12,13,"paracetamol",12,12,2200,11,11,2209,"antibiotic"},{10,10,0,12,9,"paracetamol",12,12,2200,11,11,2209,"antibiotic"}};
	  for(int i=0;i<100;i++){
	  	store[i].number_of_sold=0;
	  } 
	  	Loading_bar();
	    main_menu(store);
	
	   
	   return 0;
		
	}//End of main 
	
	void Loading_bar(){
		system("color 02");
		cout<<"\n\n\n\n Loading";
		char x=219;
		
		for(int i=0;i<60;i++){
			Sleep(10);
			cout<<x;
		}
		system("color 07");
		cout<<endl<<endl;
	}
	
	void main_menu(medicine_types store[])
	{   
		system("cls");
		cout<<"---------------------------------------"<<endl;
	    cout<<"Welcome to Our medical store Program   "<<endl;
	    cout<<"---------------------------------------"<<endl;
	    
	    int num;
	    do
	    {		
	        Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
			int count=0;
	        cout << "\n\n\n\tMAIN MENU";
	        cout << "\n\n\t01. CUSTOMER";
	        cout << "\n\n\t02. ADMINISTRATOR";
	        cout << "\n\n\t03. EXIT";
	        cout << "\n\n\tPlease Select Your Option (1-3) ";
	        cin>>num;
	        switch (num)
	        {
	        case 1:Loading_bar();
	            customer_menu(store);
	            break;
	        case 2:Loading_bar();
	        	cout<<"Enter password to log in you have 3 trials : ";
	        	backin :
	        	if(count<3){
	        	int p;
	        	cin>>p;
	        	
				if(p==123){
				cout<<"Welcome to admin menu!!";
	            admin_menu(store);}
	            else
	            	{Loading_bar();
					cout<<"Incorrect password!!! try again\n";
	            	count++;
	            	goto backin;} }	
	            cout<<"We detected illegal access trial!!";
	            exit(0);
	            break;
	            
	        case 3:	
					Loading_bar();
					cout<<"You choose to to exit the program"<<endl;
			        system("pause");
					exit(0);
	        default:Loading_bar();
	            cout << "\a";
	        }
	    } while (num != '3');
	}
	
	void admin_menu(medicine_types store[])
	{   
		char choice;
	    do{label_bb: 
		Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
		Loading_bar();
	     system("cls");
	   	Menu();
	   	cout<<"Enter your choice here: "; cin>>choice;
	   	switch(choice){
	   		
	   		case '1': Loading_bar();
	   				Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
			   		Store_Drug(store);
	    			system("pause");
	    			View_store(store);
	    			break;
	    	case '2': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					View_store(store);
	    			system("pause");
	    			break;
	    	case '3': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					check_stack(store);
	    			system("pause");
	    	        break;
	    	case '4': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					cout<<"cleared medicines!!!"<<endl;
					Drug_Disposal(store);
					cout<<"WELL done!!!"<<endl; 
					system("pause");
					break;
			case '5': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					Disposed_Med_list();
					system("pause");
					break;
			case '6': Loading_bar();
					Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					Delete_Med(store);
					cout<<"WELL done!!!"<<endl; 
					system("pause");
					break;
			case '7': Loading_bar();
					Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					Total_sales_table(store);
					system("pause");
			        break;
			case '*': Loading_bar();
					Profit_Analysis(store);
					system("pause");
					break;
	    	case '#': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					main_menu(store);
	    			system("pause");
	    	        break;
	   		case '$':Loading_bar();
			   		About();break;
	    	case '@': Loading_bar();
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					cout<<"You choose to to exit the program"<<endl;
			        system("pause");
					exit(0);
			default:Loading_bar();
					cout<<"Incorrect choice enter again..."<<endl; goto label_bb; break;
		   }
	   	
	   }while(true);
	   
	}
	
	void customer_menu(medicine_types store[])
	{   label_mm:
		int choice;
	    do{
	     system("cls");
	   	customMenu();
	   	cout<<"Enter your choice here: "; cin>>choice;
	   	switch(choice){
	   		case 1: Loading_bar();
			   		View_store(store);
	    			system("pause");
	    			break;
	    	case 2: Loading_bar();
					check_stack(store);
	    			system("pause");
	    	        break;
	    	case 3: Loading_bar();
					place_order(store);	
	    			system("pause");
	    	        break;
	    	case 4: Loading_bar();
					main_menu(store);
	    			system("pause");
	    	        break;
	    	case 5: Loading_bar();
					cout<<"You choose to to exit the program"<<endl;
			        system("pause");
					exit(0);
			default: cout<<"Incorrect choice enter again..."<<endl; goto label_mm; break;
		   }
	   	
	   }while(true);
	}
	
	void Delete_Med(medicine_types stored[]){
		int M_id;
		cout<<"Enter the ID of the medicine you are gong to delete:  "; cin>>M_id;
		Loading_bar();
			for(int i=0;i<id;i++){
			if(M_id==stored[i].ID){
				for(int k=i;k<id-1;k++){
					stored[k]=stored[k+1];
				}
			}	
		}
		id--;
	cout<<endl;
	 cout<<"The remaining medicenes...."<<endl;
	  View_store(stored);
		for(int k=0;k<id;k++){
				stored[k].ID=k+1;
				cout<<stored[k].ID<<" ";
		}
				
		cout<<"The drug ID have been modified due the cleared drug"<<endl<<endl;
		
	}
	
	void check_stack(medicine_types Med_stack[]){
		cout<<"Do you want to see the total or partial stack for specific medicine?1/0:__";
		int stack_choice,c=0;
		cin>>stack_choice;
		Loading_bar();
		if(stack_choice==1){
			
			cout.setf(ios_base::left);
			cout<<setw(6)<<"Drug ID"<<setw(18)<<"Name of Medicine"<<setw(10)<<"quantity"<<setw(10)<<"price"<<endl;
			for(int i=0;i<id;++i){
				cout<<setw(6)<<Med_stack[i].ID<<setw(18)<<Med_stack[i].name<<setw(13)<<Med_stack[i].quantity<<setw(15)<<Med_stack[i].price<<endl;
				
			}
		}
		
		else{ int Med_ID;
			cout<<"Enter the ID of the medicine you want to see:  "; 
			back:
			cin>>Med_ID;
			Loading_bar();
			cout.setf(ios_base::left);
			for(int i=0;i<id;++i)
				{
					if(Med_ID==Med_stack[i].ID)
					{
					c++;	
					}
				}
			if(c!=0){			
				cout<<setw(6)<<"Drug ID"<<setw(18)<<"Name of Medicine"<<setw(10)<<"quantity"<<setw(10)<<"price"<<endl;
				for(int k=0;k<=id;++k){
						if(Med_ID==Med_stack[k].ID){
							cout<<setw(6)<<Med_stack[k].ID<<setw(18)<<Med_stack[k].name<<setw(13)<<Med_stack[k].quantity<<setw(15)<<Med_stack[k].price<<endl;
						}
					}
			}
			else {		
			cout<<"The ID you entered doesn't have sny match in our store. Enter again: ";
			goto back;
			}
		}
	}
	void Store_Drug (medicine_types med[]){
		int k,num_of_med;
		cout<<"Do you want to continue with the default stack or you want to enter from scratch?1/0"<<endl;
		cin>>k;
		Loading_bar();
		cout<<"How many number of medicine you are going to store"<<endl;
		cin>>num_of_med;
		Loading_bar();
		switch(k){
		
		case 1:	
		{
			cout<<"\n continued Enter the necessary informations for the drug you want to store!!!"<<endl;
			for(int i=0;i<num_of_med;++i){
			    med[id].ID=id+1;
				cout<<"Drug ID: "<<med[id].ID<<endl;
				cin.ignore();
				cout<<"Enter Drug Name: "; getline(cin,med[id].name);
				cin.ignore();
				cout<<"Enter the quantity of this medicine: "; cin>>med[id].quantity;\
				cin.ignore();
				cout<<"Enter Price: ";  cin>>med[id].price;
				cout<<"Enter Drug type(E.g Antibitic,Antiseptic,Disinfectant...): "; cin>>med[id].type;
				cout<<"Enter Manufactured Date: \n";
				label3:
				cout<<"      Day: "; cin>>med[id].Manufacture_date.dd;
				if(med[id].Manufacture_date.dd>31 || med[id].Manufacture_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto label3;
				}
				label4:
				cout<<"      Month: "; cin>>med[id].Manufacture_date.mm;
				if(med[id].Manufacture_date.mm>12 || med[id].Manufacture_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label4;
				}
				label5:
				cout<<"      Year: "; cin>>med[id].Manufacture_date.yy;
				if(med[id].Manufacture_date.yy<2000){
					cout<<"Incorrect year out of bound enter again(2000-)!!!"<<endl;
					goto label5;
				}
				label6:
				cout<<"Enter Expiry Date: \n";
				cout<<"      Day: "; cin>>med[id].Expiry_date.dd;
				if(med[id].Expiry_date.dd>31 || med[id].Expiry_date.dd<1){
					cout<<"Incorrect date out of bound enter again(2000-)!!!"<<endl;
					goto label6;
				}
				label7:
				cout<<"      Month: "; cin>>med[id].Expiry_date.mm;
				if(med[id].Expiry_date.mm>12 || med[id].Expiry_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label7;
				}
				label8:
				cout<<"      Year: "; cin>>med[id].Expiry_date.yy;
				if(med[id].Expiry_date.yy<2000){
					cout<<"Incorrect month out of bound enter again(2000-)!!!"<<endl;
					goto label8;
				}
				id++; cout<<"\n\n";
				Loading_bar();
			}
		} break;
		
		default:
		
		   {
		   
		   	for(int k=0;k<10;++k){
				med[k].name="0";
			}
	    
		cout<<"\n Enter the necessary informations for the drug you want to store!!!"<<endl;
		
			for(int i=0;i<num_of_med;++i){
			    med[i].ID=i+1;
				cout<<"Drug ID: "<<med[i].ID<<endl;
				cin.ignore();
				cout<<"Enter Drug Name: "; getline(cin,med[i].name);
				cin.ignore();
				cout<<"Enter the quantity of this medicine: "; cin>>med[i].quantity;
				cout<<"Enter Price: ";  cin>>med[i].price;
				cout<<"Enter Drug type(E.g Antibitic,Antiseptic,Disinfectant...): ";getline(cin,med[i].type);
				cout<<"Enter Manufactured Date: \n";
				label9:
				cout<<"      Day: "; cin>>med[id].Manufacture_date.dd;
				if(med[i].Manufacture_date.dd>31 || med[i].Manufacture_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto label9;
				}
				label_10:
				cout<<"      Month: "; cin>>med[i].Manufacture_date.mm;
				if(med[i].Manufacture_date.mm>12 || med[i].Manufacture_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label_10;
				}
				label_11:
				cout<<"      Year: "; cin>>med[i].Manufacture_date.yy;
				if(med[i].Manufacture_date.yy<2000){
					cout<<"Incorrect year out of bound enter again(2000-)!!!"<<endl;
					goto label_11;
				}
				label_12:
				cout<<"Enter Expiry Date: \n";
				cout<<"      Day: "; cin>>med[i].Expiry_date.dd;
				if(med[i].Expiry_date.dd>31 || med[i].Expiry_date.dd<1){
					cout<<"Incorrect date out of bound enter again(2000-)!!!"<<endl;
					goto label_12;
				}
				label_13:
				cout<<"      Month: "; cin>>med[i].Expiry_date.mm;
				if(med[i].Expiry_date.mm>12 || med[i].Expiry_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label_13;
				}
				label_14:
				cout<<"      Year: "; cin>>med[i].Expiry_date.yy;
				if(med[i].Expiry_date.yy<2000){
					cout<<"Incorrect month out of bound enter again(2000-)!!!"<<endl;
					goto label_14;
				id=med[i].ID;
				Loading_bar();
			}	
			
		} break;
		
	}
		
	}
	
}
	
	void View_store(medicine_types stored[])
	{
		
	  cout<<"The database of the medicine in the store is as shown below"<<endl;
	  cout<<"-----------------------------------------------------------------"<<endl;
	  cout<<"-----------------------------------------------------------------"<<endl;
	  cout<<setw(8)<<"Med.ID"<<setw(17)<<"Med. Name"<<setw(10)<<"Quant."<<setw(10)<<"Price"<<setw(15)<<"Drug type"<<setw(15)<<"Manufacure"<<setw(15)<<"Expiry date"<<endl;
	  cout<<setw(80)<<"Date"<<endl;
	   		cout.setf(ios_base::left);
			for(int i=0;i<id;++i){
				if(stored[i].name!="0"){
			    cout<<stored[i].ID<<setw(1)<<"\t "<<stored[i].name<<setw(1)<<"\t   "<<stored[i].quantity<<setw(1)<<"\t  "<<stored[i].price<<setw(1)<<"\t\t "<<stored[i].type<<setw(1)<<"\t"
				    <<stored[i].Manufacture_date.dd<<"/"<<stored[i].Manufacture_date.mm<<"/"<<stored[i].Manufacture_date.yy
					<<"\t"<<stored[i].Expiry_date.dd<<"/"<<stored[i].Expiry_date.mm<<"/"<<stored[i].Expiry_date.yy<<endl;
		}
			}
		cout<<"-----------------------------------------------------------------"<<endl;
	    cout<<"-----------------------------------------------------------------"<<endl;
		
	} 
	
	void place_order(medicine_types store[])
	{
		
		int c=0,existance_check=0,order_arr[c];int quan[50],s;
	    float amt, damt, total = 0;
	    char ch = 'Y';
	    View_store(store);
	    cout << "\n============================";
	    cout << "\n PLACE YOUR ORDER";
	    cout << "\n============================\n";
	    
	    do
	    {   label1:
	        cout << "\n\nEnter The ID No. Of The Medicene : ";
	        cin >>order_arr[c];
	        for(int i=0;i<id;i++){
	         if(order_arr[c]==store[i].ID){
	         	 label2: s=i;
	         	 existance_check++;
		        cout << "\nQuantity in number : ";
		        cin>>quan[c];
		        if(quan[c]>store[i].quantity){
		        	cout<<"Beyond the amount in the store please enter again!!!"<<endl;goto label2;
				}
		        store[i].number_of_sold+=quan[c];  //Med_sales[c].sales_list.quantity
		        store[i].quantity=store[i].quantity-quan[c];
		           }
		        
		 }   
		 
	     if(existance_check==0)
		 	{cout<<"Medicine with this ID is doesn't exist!!!"<<endl;
		           cout<<"Please enter again correctly"<<endl; goto label1;
	           }
		
	        c++;
	        cout << "\nDo You Want To Order Another Medicene ? (y/n)";
	        cin >> ch;
	        Loading_bar();
	    } while (ch == 'y' || ch == 'Y');
	    cout << "\n\nThank You For Placing The Order";
	    system("pause");
	    system("cls");
	
	    cout << "\n\n******************************** PURCHASED ************************\n";
	    cout << "\nMed ID\tMd Name\tQuantity \tPrice \tAmount \n ";
	    
	    
	    
	    for(int i=0;i<c;i++)
	    {
	    	int x=0;
	    	int m=0;
	    	while(m<id)
	    	{
	    		if(store[x].ID == order_arr[i])
				{
					amt=store[x].price*quan[i];
					cout << "\n" << store[x].ID << "\t" << store[x].name<<
	                    "\t" << quan[i] << "\t" << store[x].price<< "\t" << amt;
	                total += amt;	
				}
				x++;
				m++;
			}
		}
		
		cout << "\n\n\t\t\t\tTOTAL = " << total<<endl;
		system("pause");
	    system("cls");
				 customer_menu(store);
	}
	
	void Expiry_Notification_Indicator(medicine_types Medicines[]){
		int n=0;
		SYSTEMTIME current_time;
		GetSystemTime (&current_time);
	    HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
	    cout.setf(ios_base::left);
		for(int i=0;i<id;++i){
			if(current_time.wYear>Medicines[i].Expiry_date.yy){
				SetConsoleTextAttribute(font_color,4); n++;
	 			Loading_bar_noti();
			}
	
			else if(current_time.wYear==Medicines[i].Expiry_date.yy){
	
				if(current_time.wMonth>Medicines[i].Expiry_date.mm){
					SetConsoleTextAttribute(font_color,4); n++;
					Loading_bar_noti();
				cout<<Medicines[i].ID<<"\t"<<Medicines[i].name<<endl;
			    }
	
			    else if(current_time.wMonth==Medicines[i].Expiry_date.mm){
	
				    	if(current_time.wDay>=Medicines[i].Expiry_date.dd){
				    		SetConsoleTextAttribute(font_color,5); n++;
				    		Loading_bar_noti();
	
				    	}
	
	
				}
	
	
			}
	
	
	
		}
		if(n==0){
		    SetConsoleTextAttribute(font_color,7);
		}
	
	}
	
	void Drug_Disposal(medicine_types store[]){
		SYSTEMTIME current_time;
		GetSystemTime (&current_time);
		int m=0;
		for(int i=0;i<id;++i){
			if(current_time.wYear>store[i].Expiry_date.yy){
				Disposed_Med[m]=store[i]; m++;
				for(int k=i;k<id-1;k++){
					store[k]=store[k+1];
				} --i;	id--;
			}
			else if(current_time.wYear==store[i].Expiry_date.yy){
	
				if(current_time.wMonth>store[i].Expiry_date.mm){
					Disposed_Med[m]=store[i]; m++;
					for(int k=i;k<id-1;k++){
					store[k]=store[k+1];
				}--i; id--;
				}
				else if(current_time.wMonth==store[i].Expiry_date.mm){
					if(current_time.wDay>=store[i].Expiry_date.dd){
						Disposed_Med[m]=store[i]; m++;
						for(int k=i;k<id-1;k++){
						store[k]=store[k+1];
						}--i; id--;
					}
	
				}
	
			}
	
		}
	    dd+=m;
		if(m!=0){
		cout<<setw(10)<<"Drug ID"<<setw(15)<<"Name "<<setw(7)<<"quantity"<<setw(7)<<"cost "<<endl;
		for(int j=0;j<m;j++){
			   cout<<setw(7)<<Disposed_Med[j].ID<<setw(17)<<Disposed_Med[j].name<<setw(10)<<Disposed_Med[j].quantity<<setw(7)<<Disposed_Med[j].cost_of_each_drug<<endl;
			}
	
		}
		
		else
		   cout<<"No expired drug is detectd"<<endl;
		   
		   for(int k=0;k<id;k++){
				store[k].ID=k+1;
				cout<<store[k].ID<<" ";
		}
		cout<<"The drug ID have been modified due the cleared drugs"<<endl<<endl;
	
	}
	
	void Disposed_Med_list(){
		cout<<"---------------------------------------------------"<<endl;
		cout<<"The disposed  medicines list"<<endl;
		cout<<"---------------------------------------------------"<<endl;
		cout<<"---------------------------------------------------"<<endl;
			cout<<setw(10)<<"Drug ID"<<setw(15)<<"Name "<<setw(7)<<"quantity"<<setw(7)<<"cost "<<endl;
		for(int j=0;j<dd;j++){
			   cout<<setw(7)<<Disposed_Med[j].ID<<setw(17)<<Disposed_Med[j].name<<setw(10)
			       <<Disposed_Med[j].quantity<<setw(7)<<Disposed_Med[j].cost_of_each_drug<<endl;
				
	    }
	    
	    cout<<"---------------------------------------------------"<<endl;
		cout<<"---------------------------------------------------"<<endl;
	
    }
	
