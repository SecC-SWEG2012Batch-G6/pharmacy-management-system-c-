	#include <iostream>
	#include <fstream>
	#include <cstdlib>
	#include <iomanip>
	#include <windows.h>
	#include <conio.h>
	#include <vector>
	#include <iterator>
    #include <algorithm>
	using namespace std;
	int id=10,dd=0;
	const int Size=500;
	void Menu(){HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(font_color,11);
	        cout<<"+ + + + + + + + + + + + + + + + + + + +"<<endl;
	        cout<<"+ What do you want to do? 	  		 +"<<endl;
	        cout<<"+ 1. Update drug store   		 	 +"<<endl;
	        cout<<"+ 2. View drug store     			 +"<<endl;
	        cout<<"+ 3. View drug stack     			 +"<<endl;
            cout<<"+ 4. Delete a medicine   			 +"<<endl;
	        cout<<"+ 5.	Drug disposal                     +"<<endl;
	        cout<<"+ 6. Disposed Medicines  			 +"<<endl;
	        cout<<"+ 7. Daily total sales 		    	 +"<<endl;
	        cout<<"+ 8. Modify An Entry 		    	 +"<<endl;
	        cout<<"+ M. Back to Main Menu    			 +"<<endl;
	        cout<<"+ P. Total profit Vs Total cost   	 +"<<endl;
	        cout<<"+ A. About                			 +"<<endl;
	        cout<<"+ E. Exit                 			 +"<<endl;
	        cout<<"+ + + + + + + + + + + + + + + + + + + +"<<endl;
		SetConsoleTextAttribute(font_color,7);

	}


	void customMenu(){
		HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(font_color,14);
		cout<<"+ + + + + + + + + + + + + + + +"<<endl;
		cout<<"+ What do you want to do?     +"<<endl;
		cout<<"+ 1. View drug store          +"<<endl;
		cout<<"+ 2. View drug availability   +"<<endl;
	    cout<<"+ 3. Place Order              +"<<endl;
	    cout<<"+ 4. Back to Main Menu        +"<<endl;
	    cout<<"+ 5. Exit                     +"<<endl;
		cout<<"+ + + + + + + + + + + + + + + +"<<endl;
	}

	void About(){HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(font_color,6);
		cout<<"This system is designed to handle the transactons of a pharmacy medical store managemet.\n"
		    <<"It is straight forward since it has a specified descriptive heading  for each task except \n"
			<<"one thing,which is sometimes at the time of run you may look a red lightning,which indicates\n"
			<<"that,there is a drug in the store that has been expired and need to be disposed."<<endl;
	}


	struct Date{
	    int dd,mm,yy;
	};

	struct medicine_types{
	   // string ID;
		int ID,quantity,number_of_sold;
		float price,cost_of_each_drug;
		string name;
		Date Manufacture_date,Expiry_date;
		string type;

	};

	struct sale{
     int customer_id,quantity_sold;
	 string customer_name;
	 int med_id;
	 float m_price;
	 string med_name;
	 Date sale_date;
	};

	vector<medicine_types> Disposed_med;
    vector<sale> sale_history;

	void Store_Drug (vector<medicine_types> &medicine);
    void View_store(vector<medicine_types> &stored);
    void main_menu(vector<medicine_types> store);
	void admin_menu(vector<medicine_types> store);
	void customer_menu(vector<medicine_types> store);
    void Notification_bar();
    void Loading_bar();
    void check_stack(vector<medicine_types> &Med_stack);
    void Struct_Initializer(vector<medicine_types> &store);
    void Delete_All(vector<medicine_types> &store);
    void Delete_Entry(vector<medicine_types> &store,int id=0);
    void Expiry_Notification_Indicator(vector<medicine_types> &Medicines);
    void delete_entry(vector<medicine_types> &store,int id);
    void Drug_Disposal(vector<medicine_types> &store);
    void Disposed_Medicines();
    void To_Buy_Medicine(vector<medicine_types> &store);

    //Main function
	int main(){
        vector<medicine_types> store;
        Struct_Initializer(store);
        main_menu(store);

	return 0;
	}//End of main


    void Notification_bar(){
		system("color 04");
		cout<<"\t\t\t\t\nYou have expired drugs...";
		char x=219;
		for(int i=0;i<40;i++){
			cout<<x;
			Sleep(2);
		}
		system("color 07");
		Sleep(5);
		cout<<endl;

	}

	void Loading_bar(){
		system("color 02");
		cout<<"\n\n\n\n Loading";
		char x=219;

		for(int i=0;i<60;i++){
			Sleep(5);
			cout<<x;
		}
		system("color 07");
		cout<<endl<<endl;
	}

	void main_menu(vector<medicine_types> store)
	{
	    HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
		system("cls");
		SetConsoleTextAttribute(font_color,10);
		cout<<"                    ---------------------------------------"<<endl;
		cout<<"                    ---------------------------------------"<<endl;
	    cout<<"--------------------|Welcome to Our Pharmacy store Program| --------------------"<<endl;
	    cout<<"                    ---------------------------------------"<<endl;
		cout<<"                    ---------------------------------------"<<endl;
	    char chioce;
	    do
	    {
            SetConsoleTextAttribute(font_color,9);
            int counter=0;
            cout << "\n\n\n\tMAIN MENU";
            cout << "\n\n\tA. ADMINISTRATOR";
            cout << "\n\n\tC. CUSTOMER";
            cout << "\n\n\tE. EXIT";
            cout << "\n\n\tPlease Select Your Option: ";
            input:
            cin>>chioce;
            switch (chioce)
            {   case 'a':
                case 'A':Loading_bar();
                         admin_menu(store);
                break;
                case 'c':
                case 'C':Loading_bar();
                       customer_menu(store);
                break;
                case 'e':
                case 'E':
                        Loading_bar();
                        cout<<"You choose to to exit the program"<<endl;
                        system("pause");
                        exit(0);
                default:Loading_bar();
                    cout << "Incorrect choice try again... ";goto input;

            }
	    }while(true);

	}


	void admin_menu(vector<medicine_types> store)
	{
		char choice;
	    do{label_bb:
		Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
	     system("cls");
	   	Menu();
	   	cout<<"Enter your choice here: ";
	   	input:
	   	cin>>choice;
	   	switch(choice){

	   		case '1': Loading_bar();
	   				system("cls");
	   				Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
			   		Store_Drug(store);
	    			system("pause");
	    			View_store(store);
	    			system("pause");
	    			break;
	    	case '2': Loading_bar();
	    			system("cls");
	    			Expiry_Notification_Indicator(store); //function call to indicate existance of expired drug
					View_store(store);
	    			system("pause");
	    			break;
            case '3':Loading_bar();
                    Expiry_Notification_Indicator(store);
	    			system("cls");
	    			check_stack(store);
	    			system("pause");
            break;
            case '4':Loading_bar();
                     Expiry_Notification_Indicator(store);
	    			 system("cls");
                     Delete_Entry(store);
                     system("pause");
            break;
            case '5':Loading_bar();
                     Expiry_Notification_Indicator(store);
	    			 system("cls");
	    			 Drug_Disposal(store);
                     system("pause");
            break;
            case '6':Loading_bar();
                     Expiry_Notification_Indicator(store);
	    			 system("cls");
	    			 Disposed_Medicines();
	    			 system("pause");
            break;
            case 'e':
            case 'E': cout<<"You choose to exit."<<endl;
                      system("pause");
                      exit(0);
            default: cout<<"Wrong input enter again: "; goto input;
	   	}

	    }while(true);

	}

	void customer_menu(vector<medicine_types> store)
	{   label_mm:
		int choice;
	    do{
	     system("cls");
	   	customMenu();
	   	cout<<"Enter your choice here: "; cin>>choice;
	   	switch(choice){
	   		case 1: Loading_bar();
	   				system("cls");
			   		View_store(store);
	    			system("pause");
	    			break;
	    	case 2: Loading_bar();
	    			system("cls");
					check_stack(store);
	    			system("pause");
	    	        break;
	    	case 3: Loading_bar();
	    			system("cls");
					To_Buy_Medicine(store);
	    			system("pause");
	    	        break;
	    	case 4: Loading_bar();
	    			system("cls");
					main_menu(store);
	    			system("pause");
	    	        break;
	    	case 5: Loading_bar();
					cout<<"You choose to to exit the program"<<endl;
			        system("pause");
					exit(0);
			default: cout<<"Incorrect choice enter again..."<<endl; goto label_mm; break;
		   }

	   }while(true);
	}


	 void Struct_Initializer(vector<medicine_types> &store){

        store.push_back({1,205,15,55.67,23.50,"Paracetamol",12,12,2020,11,11,2022,"antibiotic"});
	    store.push_back({2,3,0,100.90,56.77,"Humalog",10,12,2018,11,11,2020,"anti-diabetic"});
	    store.push_back({3,4,0,120.99,50.23,"Phoslo",12,12,2019,11,11,2020,"antibiotic"});
	    store.push_back({4,156,0,125.55,10.99,"Aspirin",12,12,2020,11,9,2021,"antibiotic"});
	    store.push_back({5,256,0,150.90,89.99,"Vicks Formula 44",12,12,2020,11,11,2024,"anti-tussive"});
	    store.push_back({6,5,0,200.55,120.66,"Xyzal",12,12,2018,11,11,2019,"anti-histamine"});
	    store.push_back({7,100,0,99.78,50,"Nexplanon",12,12,2020,11,11,2029,"contraceptives"});
	    store.push_back({8,690,0,180,110.99,"Meclizine",12,12,2020,11,11,2022,"antibiotic"});
	    store.push_back({9,324,0,175.76,100.67,"Lisinoprril",12,12,2020,11,11,2022,"anti-hyper"});
	    store.push_back({10,222,0,145.78,99.54,"Afrin",12,12,2020,11,11,2021,"anti-pyretic"});
	}

	void Delete_All(vector<medicine_types> &store){
		store.clear();id=0;
	}

	void Store_Drug (vector<medicine_types> &medicine){
	int k,num_of_med;
	medicine_types med;
		cout<<"Do you want to continue with the default stack or you want to enter from scratch?1/0"<<endl;
		cin>>k;
		Loading_bar();
		//read_write(med,"pharma.txt",0);
		system("cls");
		cout<<"How many number of medicine you are going to store"<<endl;
		cin>>num_of_med;
		Loading_bar();
		system("cls");
		switch(k){

		case 1:
		{
			cout<<"\n continued Enter the necessary informations for the drug you want to store!!!"<<endl;
			for(int i=0;i<num_of_med;++i){
			    med.ID=id+1;
				cout<<"Drug ID: "<<med.ID<<endl;
				cin.ignore();
				cout<<"Enter Drug Name: "; getline(cin,med.name);
				cin.ignore();
				cout<<"Enter the quantity of this medicine: ";
				labe20:
				cin>>med.quantity;
				if(med.quantity<0){
					cout<<"No such Quantity,enter again "; goto labe20;
				}
				cin.ignore();
				cout<<"Enter Price: ";
				label21:
				cin>>med.price;
				if(med.price<0){
					cout<<"Price can't be negative,enter again "; goto label21;
				}
				cout<<"Enter Cost: ";
				label22:
				cin>>med.cost_of_each_drug;
				if(med.cost_of_each_drug<0){
					cout<<"Negative value is noallowed,enter again "; goto label22;
				}
				cin.ignore();
				cout<<"Enter Drug type(E.g Antibitic,Antiseptic,Disinfectant...): "; cin>>med.type;
				cin.ignore();
				cout<<"Enter Manufactured Date: \n";
				label3:
				cout<<"      Day: "; cin>>med.Manufacture_date.dd;
				if(med.Manufacture_date.dd>31 || med.Manufacture_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto label3;
				}
				label4:
				cout<<"      Month: "; cin>>med.Manufacture_date.mm;
				if(med.Manufacture_date.mm>12 || med.Manufacture_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label4;
				}
				label5:
				cout<<"      Year: "; cin>>med.Manufacture_date.yy;
				if(med.Manufacture_date.yy<2000){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto label5;
				}
				label6:
				cout<<"Enter Expiry Date: \n";
				cout<<"      Day: "; cin>>med.Expiry_date.dd;
				if(med.Expiry_date.dd>31 || med.Expiry_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto label6;
				}
				label7:
				cout<<"      Month: "; cin>>med.Expiry_date.mm;
				if(med.Expiry_date.mm>12 || med.Expiry_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto label7;
				}
				label8:
				cout<<"      Year: "; cin>>med.Expiry_date.yy;
				if(med.Expiry_date.yy<2000){
					cout<<"Incorrect month out of bound enter again(2000-)!!!"<<endl;
					goto label8;
				}
				id++; cout<<"\n\n";
				Loading_bar();
            medicine.push_back(med);
			}
		} break;

		default:
		Delete_All(medicine);
		   {
		cout<<"\n Enter the necessary informations for the drug you want to store!!!"<<endl;

			for(int i=0;i<num_of_med;++i){
			    med.ID=i+1;
				cout<<"Drug ID: "<<med.ID<<endl;
				cin.ignore();
				cout<<"Enter Drug Name: "; getline(cin,med.name);
				cin.ignore();
				cout<<"Enter the quantity of this medicine: ";
				labe_1:
				cin>>med.quantity;
				if(med.quantity<0){
					cout<<"No such Quantity,enter again "; goto labe_1;
				}
				cin.ignore();
				cout<<"Enter Price: ";
				labe_2:
				cin>>med.price;
				if(med.price<0){
					cout<<"Price can't be negative,enter again "; goto labe_2;
				}
				cout<<"Enter Cost: ";
				labe_3:
				cin>>med.cost_of_each_drug;
				if(med.cost_of_each_drug<0){
					cout<<"Negative value is noallowed,enter again "; goto labe_3;
				}
				cin.ignore();
				cout<<"Enter Drug type(E.g Antibitic,Antiseptic,Disinfectant...): "; cin>>med.type;
				cin.ignore();
				cout<<"Enter Manufactured Date: \n";
				labe_4:
				cout<<"      Day: "; cin>>med.Manufacture_date.dd;
				if(med.Manufacture_date.dd>31 || med.Manufacture_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto labe_4;
				}
				labe_5:
				cout<<"      Month: "; cin>>med.Manufacture_date.mm;
				if(med.Manufacture_date.mm>12 || med.Manufacture_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto labe_5;
				}
				labe_6:
				cout<<"      Year: "; cin>>med.Manufacture_date.yy;
				if(med.Manufacture_date.yy<2000){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto labe_6;
				}
				labe_7:
				cout<<"Enter Expiry Date: \n";
				cout<<"      Day: "; cin>>med.Expiry_date.dd;
				if(med.Expiry_date.dd>31 || med.Expiry_date.dd<1){
					cout<<"Incorrect date out of bound enter again(1-31)!!!"<<endl;
					goto labe_7;
				}
				labe_8:
				cout<<"      Month: "; cin>>med.Expiry_date.mm;
				if(med.Expiry_date.mm>12 || med.Expiry_date.mm<1){
					cout<<"Incorrect month out of bound enter again(1-12)!!!"<<endl;
					goto labe_8;
				}
				labe_9:
				cout<<"      Year: "; cin>>med.Expiry_date.yy;
				if(med.Expiry_date.yy<2000){
					cout<<"Incorrect month out of bound enter again(2000-)!!!"<<endl;
					goto labe_9;
				}
				id=med.ID;
				Loading_bar();
                medicine.push_back(med);
			}

		} break;

	}

	}

	
	void View_store(){
	HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
	ifstream infile("Pharmacy.text",ios::in);
	int m=0;
		//system("cls");
		if(infile.is_open()){
	  cout<<"The database of the medicine in the store is as shown below"<<endl;
	  cout<<"-----------------------------------------------------------------"<<endl;
	  cout<<"-----------------------------------------------------------------"<<endl;
	  SetConsoleTextAttribute(font_color,3);
	  cout<<setw(8)<<"Med.ID"<<setw(17)<<"Med. Name"<<setw(10)<<"Quant."<<setw(10)<<"Price"<<setw(10)<<"cost"<<setw(20)<<"Drug type"
	  	  <<setw(17)<<"Manufac.date"<<setw(15)<<"Expiry date"<<endl;
	        int check=0;
	   		cout.setf(ios_base::left);
	   		infile.seekg(0,ios::end);
	   		int final=infile.tellg();
	   		infile.seekg(0,ios::beg);
			for(int i=0;i<id;i++){
				if(m%2==0){
					SetConsoleTextAttribute(font_color,8);
				}
				else{
					SetConsoleTextAttribute(font_color,2);
				}m++;
		
				     infile>>med->ID;
				     infile>>med->name;
				     infile>>med->quantity;
				     infile>>med->price;
				     infile>>med->cost_of_each_drug;
				     infile>>med->number_of_sold;
	                 infile>>med->type;
	                 infile>>med->Manufacture_date.dd;
	                 infile>>med->Manufacture_date.mm;
	                 infile>>med->Manufacture_date.yy;
	                 infile>>med->Expiry_date.dd;
	                 infile>>med->Expiry_date.mm;
	                 infile>>med->Expiry_date.yy;

	                        cout<<setw(8)<<med->ID<<setw(17)<<med->name<<setw(10)<<med->quantity<<setw(10)
	                        <<med->price<<setw(10)<<med->cost_of_each_drug<<setw(18)<<med->type<<" "<<setw(1)
	                        <<med->Manufacture_date.dd<<"/"<<med->Manufacture_date.mm<<"/"<<med->Manufacture_date.yy<<setw(4)
	                        <<setw(6)<<"\t"<<med->Expiry_date.dd<<"/"<<med->Expiry_date.mm<<"/"<<med->Expiry_date.yy<<endl;
	                        
			}
		cout<<"-----------------------------------------------------------------"<<endl;
	    cout<<"-----------------------------------------------------------------"<<endl;
		}
		else{
	        cout<<"File open failed"<<endl;
		}
	}
	
	void check_stack(){
	   ifstream infile("Pharmacy.text",ios::in);
	   if(infile.is_open()){
		HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
		int m=0;
		system("cls");
		cout<<"Do you want to see the total or partial stack for specific medicine?1/0:__";
		int stack_choice,c=0;
		cin>>stack_choice;
		Loading_bar();
		system("cls");
		if(stack_choice==1){
	
			cout.setf(ios_base::left);
			SetConsoleTextAttribute(font_color,2);
			cout<<setw(8)<<"Drug ID"<<setw(18)<<"Name of Medicine"<<setw(13)<<"quantity"<<setw(10)<<"price"<<endl;
			SetConsoleTextAttribute(font_color,7);
			for(int i=1;i<=id;i++){
				if(m%2==0){
					SetConsoleTextAttribute(font_color,6);
				}
				else{
					SetConsoleTextAttribute(font_color,8);
				}
	                 infile>>med->ID;
				     infile>>med->name;
				     infile>>med->quantity;
				     infile>>med->price;
				     infile>>med->cost_of_each_drug;
				     infile>>med->number_of_sold;
	                 infile>>med->type;
	                 infile>>med->Manufacture_date.dd;
	                 infile>>med->Manufacture_date.mm;
	                 infile>>med->Manufacture_date.yy;
	                 infile>>med->Expiry_date.dd;
	                 infile>>med->Expiry_date.mm;
	                 infile>>med->Expiry_date.yy;
				m++;
				cout<<setw(10)<<med->ID<<setw(18)<<med->name<<setw(11)<<med->quantity<<setw(10)<<med->price<<endl;
	
			}
		}
	
		else{ int Med_ID;
			cout<<"Enter the ID of the medicine you want to see:  ";
			back:
			cin>>Med_ID;
			Loading_bar();
			system("cls");
			cout.setf(ios_base::left);
			while(!infile.eof())
				{    infile>>med->ID;
				     infile>>med->name;
				     infile>>med->quantity;
				     infile>>med->price;
				     infile>>med->cost_of_each_drug;
				     infile>>med->number_of_sold;
	                 infile>>med->type;
	                 infile>>med->Manufacture_date.dd;
	                 infile>>med->Manufacture_date.mm;
	                 infile>>med->Manufacture_date.yy;
	                 infile>>med->Expiry_date.dd;
	                 infile>>med->Expiry_date.mm;
	                 infile>>med->Expiry_date.yy;
					if(Med_ID==med->ID)
					{
					c++;
					break;
					}
				}
			if(c!=0){
				system("color 2");
				cout<<setw(10)<<"Drug ID"<<setw(18)<<"Name of Medicine"<<setw(10)<<"quantity"<<setw(10)<<"price"<<endl;
				SetConsoleTextAttribute(font_color,9);
	            cout<<setw(10)<<med->ID<<setw(18)<<med->name<<setw(13)<<med->quantity<<setw(15)<<med->price<<endl;
			}
			else {
			cout<<"The ID you entered don't have any match in our store. Enter again: ";
			goto back;
			}
			SetConsoleTextAttribute(font_color,7);
		}
		SetConsoleTextAttribute(font_color,7);
	   }
	   else
	   {
	        cout<<"File open failed"<<endl;
	   }
	}
	
	void Expiry_Notification_Indicator(){
		int n=0;
		SYSTEMTIME current_time;
		GetSystemTime (&current_time);
	    HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
	    ifstream infile("Pharmacy.text");
	    if(infile.is_open()){
	    cout.setf(ios_base::left);
		for(int i=1;i<=id;i++){
	            infile>>med->ID;
				     infile>>med->name;
				     infile>>med->quantity;
				     infile>>med->price;
				     infile>>med->cost_of_each_drug;
				     infile>>med->number_of_sold;
	                 infile>>med->type;
	                 infile>>med->Manufacture_date.dd;
	                 infile>>med->Manufacture_date.mm;
	                 infile>>med->Manufacture_date.yy;
	                 infile>>med->Expiry_date.dd;
	                 infile>>med->Expiry_date.mm;
	                 infile>>med->Expiry_date.yy;
			if(current_time.wYear>med->Expiry_date.yy){
				SetConsoleTextAttribute(font_color,4); n++;
	 			Notification_bar();
			}
	
			else if(current_time.wYear==med->Expiry_date.yy){
	
				if(current_time.wMonth>med->Expiry_date.mm){
					SetConsoleTextAttribute(font_color,4); n++;
					Notification_bar();
			    }
	
			    else if(current_time.wMonth==med->Expiry_date.mm){
	
				    	if(current_time.wDay>=med->Expiry_date.dd){
				    		SetConsoleTextAttribute(font_color,5); n++;
				    		Notification_bar();
	
				    	}
				}
			}
		}
		infile.close();
		if(n==0){
		    SetConsoleTextAttribute(font_color,7);
		}
	
	    }
	    else
	        cout<<"File open failed"<<endl;
	
	}
	
	void Update_Med(){  // can be done in other way
  int M_id;
  cout<<"Enter the ID of the medicine you are gong to modify:  "; cin>>M_id;
  Loading_bar();
     system("cls");
     ifstream infile("Pharmacy.text");
     ofstream ofile("newPharmacy.text");
 
     if(infile.is_open()){
         for(int i=1;i<=id;i++){
                  infile>>med->ID;
         infile>>med->name;
         infile>>med->quantity;
         infile>>med->price;
         infile>>med->cost_of_each_drug;
         infile>>med->number_of_sold;
                  infile>>med->type;
                  infile>>med->Manufacture_date.dd;
                  infile>>med->Manufacture_date.mm;
                  infile>>med->Manufacture_date.yy;
                  infile>>med->Expiry_date.dd;
                  infile>>med->Expiry_date.mm;
                  infile>>med->Expiry_date.yy;
                 if(M_id!=med->ID){
                      if(ofile.is_open()){
                      ofile<<med->ID<<" ";
                      ofile<<med->name<<" ";
                      ofile<<med->quantity<<" ";
                      ofile<<med->price<<" ";
                      ofile<<med->cost_of_each_drug<<" ";;
                      ofile<<med->number_of_sold<<" ";
                      ofile<<med->type<<" ";
                      ofile<<med->Manufacture_date.dd<<" ";
                      ofile<<med->Manufacture_date.mm<<" ";
                      ofile<<med->Manufacture_date.yy<<" ";
                      ofile<<med->Expiry_date.dd<<" ";
                      ofile<<med->Expiry_date.mm<<" ";
                      ofile<<med->Expiry_date.yy<<" "<<endl;
                         }
                         else{
                             cout<<"New file open failed"<<endl;
                             break;
                         }
                 }
                 else if(M_id==med->ID){
                  med->ID=M_id;
                  cout<<"Enter new drug name: ";
         cin>>med->name;
         cout<<"Enter new drug quntity: ";
         cin>>med->quantity;
         cout<<"Enter new drug price: ";
         cin>>med->price;
         cout<<"Enter new drug cost: ";
         cin>>med->cost_of_each_drug;
         med->number_of_sold=0;
         cout<<"Enter new drug type: ";
                  cin>>med->type;
                  cout<<"Enter new Manufactured Date: \n";
                  cout<<"      Day: ";
                  cin>>med->Manufacture_date.dd;
                  cout<<"      Month: ";
                  cin>>med->Manufacture_date.mm;
                  cout<<"      Year: ";
                  cin>>med->Manufacture_date.yy;
                  cout<<"Enter new Expiry Date: \n";
                  cout<<"      Day: ";
                  cin>>med->Expiry_date.dd;
                  cout<<"      Month: ";
                  cin>>med->Expiry_date.mm;
                  cout<<"      Year: ";
                  cin>>med->Expiry_date.yy;
                  
                  ofile<<med->ID<<" ";
                     ofile<<med->name<<" ";
                     ofile<<med->quantity<<" ";
                     ofile<<med->price<<" ";
                     ofile<<med->cost_of_each_drug<<" ";;
                     ofile<<med->number_of_sold<<" ";
                     ofile<<med->type<<" ";
                     ofile<<med->Manufacture_date.dd<<" ";
                     ofile<<med->Manufacture_date.mm<<" ";
                     ofile<<med->Manufacture_date.yy<<" ";
                     ofile<<med->Expiry_date.dd<<" ";
                     ofile<<med->Expiry_date.mm<<" ";
                     ofile<<med->Expiry_date.yy<<" "<<endl; id--;
             }
 
             }
         infile.close();
         ofile.close();
 
         if(remove("Pharmacy.text")==0){
             cout<<"The old file is removed"<<endl;
        }
        else{
         cout<<"File removing is failed"<<endl;
        }
        if(rename("newPharmacy.text","Pharmacy.text")==0){
            cout<<"The new file is renamed"<<end

void Dispose_Med(){
  int n,temp;
  SYSTEMTIME current_time;
  GetSystemTime (&current_time);
     HANDLE font_color=GetStdHandle(STD_OUTPUT_HANDLE);
     ifstream infile("Pharmacy.text");
     if(infile.is_open()){
     cout.setf(ios_base::left);
     ofstream outfile("Deleted.text",ios::app);
  for(int i=0;i<id;i++){
               infile>>med->ID;
         infile>>med->name;
         infile>>med->quantity;
         infile>>med->price;
         infile>>med->cost_of_each_drug;
         infile>>med->number_of_sold;
                  infile>>med->type;
                  infile>>med->Manufacture_date.dd;
                  infile>>med->Manufacture_date.mm;
                  infile>>med->Manufacture_date.yy;
                  infile>>med->Expiry_date.dd;
                  infile>>med->Expiry_date.mm;
                  infile>>med->Expiry_date.yy;
   if(current_time.wYear>med->Expiry_date.yy){
    temp=med->ID;
    if(outfile.is_open()){
    outfile<<med->ID<<" "<<med->name<<" "<<med->quantity<<" "<<med->price<<" "<<med->cost_of_each_drug<<" "<<med->number_of_sold<<" "<<med->type<<" "
           <<med->Manufacture_date.dd<<" "<<med->Manufacture_date.mm<<" "<<med->Manufacture_date.yy<<" "<<med->Expiry_date.dd<<" "
        <<med->Expiry_date.mm<<" "<<med->Expiry_date.yy<<endl;
   }
    Delete_Med(temp);
   }
 
   else if(current_time.wYear==med->Expiry_date.yy){
 
    if(current_time.wMonth>med->Expiry_date.mm){
     temp=med->ID;
     if(outfile.is_open()){
     outfile<<med->ID<<" "<<med->quantity<<" "<<med->price<<" "<<med->cost_of_each_drug<<" "<<med->number_of_sold<<" "
           <<med->Manufacture_date.dd<<" "<<med->Manufacture_date.mm<<" "<<med->Manufacture_date.yy<<" "<<med->Expiry_date.dd<<" "
        <<med->Expiry_date.mm<<" "<<med->Expiry_date.yy<<endl;
    }
    Delete_Med(temp);
       }
 
       else if(current_time.wMonth==med->Expiry_date.mm){
 
         if(current_time.wDay>=med->Expiry_date.dd){
          temp=med->ID;
       if(outfile.is_open()){
       outfile<<med->ID<<" "<<med->quantity<<" "<<med->price<<" "<<med->cost_of_each_drug<<" "<<med->number_of_sold<<" "
              <<med->Manufacture_date.dd<<" "<<med->Manufacture_date.mm<<" "<<med->Manufacture_date.yy<<" "<<med->Expiry_date.dd<<" "
           <<med->Expiry_date.mm<<" "<<med->Expiry_date.yy<<endl;
      }
    Delete_Med(temp);
         }
    }
   }
  }
 infile.close();
 outfile.close();
     }
     else
         cout<<"File open failed"<<endl;
  
  
 }
